package com.webank.authmanager.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint16;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class AuthManager extends Contract {
    public static final String[] BINARY_ARRAY = {"","80601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612e37565b005b3480156109c957600080fd5b506109eb600480360381019080803560ff169060200190929190505050612f0b565b005b3480156109f957600080fd5b50610a2e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612f93565b005b348015610a3c57600080fd5b50610afd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613194565b005b348015610b0b57600080fd5b50610b146134fe565b60405180806020018360ff1660ff168152602001828103825284818151815260200191508051906020019080838360005b83811015610b60578082015181840152602081019050610b45565b50505050905090810190601f168015610b8d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b348015610ba857600080fd5b50610bb1613634565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610bf4578082015181840152602081019050610bd9565b505050509050019250505060405180910390f35b348015610c1457600080fd5b50610c8f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613645565b005b348015610c9d57600080fd5b50610ca661392a565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610d18578082015181840152602081019050610cfd565b50505050905090810190601f168015610d455780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b348015610d6057600080fd5b50610d69613a73565b005b348015610d7757600080fd5b50610d80613c5a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610dce57600080fd5b50610dd7613c83565b604051808215151515815260200191505060405180910390f35b348015610dfd57600080fd5b50610e78600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613d9c565b005b348015610e8657600080fd5b50610ebb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614081565b604051808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff1661ffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018461ffff1661ffff1681526020018360ff1660ff1681526020018260ff1660ff16815260200197505050505050505060405180910390f35b348015610f7b57600080fd5b50610f8461416a565b005b348015610f9257600080fd5b50610f9b6143c9565b6040518082815260200191505060405180910390f35b348015610fbd57600080fd5b50610fc66143d3565b005b348015610fd457600080fd5b50610fdd6145a7565b005b348015610feb57600080fd5b50610ff4614950565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561106657808201518184015260208101905061104b565b50505050905090810190601f1680156110935780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156110ae57600080fd5b506110d0600480360381019080803560ff169060200190929190505050614a99565b005b3480156110de57600080fd5b50611159600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614b21565b604051808215151515815260200191505060405180910390f35b34801561117f57600080fd5b506111b4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614be4565b005b3480156111c257600080fd5b5061121d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050614e8f565b604051808460ff1660ff168152602001838152602001828152602001935050505060405180910390f35b34801561125357600080fd5b50611288600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614f2c565b604051808361ffff1661ffff1681526020018261ffff1661ffff1681526020019250505060405180910390f35b3480156112c157600080fd5b506112ca615039565b005b3480156112d857600080fd5b50611356600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050615220565b604051808215151515815260200191505060405180910390f35b34801561137c57600080fd5b506113f7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506153dd565b005b34801561140557600080fd5b5061143a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506154af565b005b34801561144857600080fd5b50611451615637565b604051808215151515815260200191505060405180910390f35b34801561147757600080fd5b50611538600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061568e565b005b34801561154657600080fd5b5061156560048036038101908080359060200190929190505050615762565b604051808360ff1660ff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b3480156115c057600080fd5b50611628600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff16906020019092919050505061584f565b005b34801561163657600080fd5b506116d16004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050615921565b005b3480156116df57600080fd5b50611714600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050615bcd565b005b34801561172257600080fd5b5061172b615d65565b005b34801561173957600080fd5b50611742615fe7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561179057600080fd5b506117b2600480360381019080803560ff169060200190929190505050616011565b604051808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff1661ffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018461ffff1661ffff1681526020018360ff1660ff1681526020018260ff1660ff16815260200197505050505050505060405180910390f35b34801561187257600080fd5b506118a7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061607f565b604051808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff1661ffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018461ffff1661ffff1681526020018360ff1660ff1681526020018260ff1660ff16815260200197505050505050505060405180910390f35b34801561196757600080fd5b50611a28600480360381019080803573ffffffffffffff","","","","000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601b808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614a8a5780601f10614a5f57610100808354040283529160200191614a8a565b820191906000526020600020905b815481529060010190602001808311614a6d57829003601f168201915b50505050509050915091509091565b614aa1613c83565b1515614b15576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b614b1e81618497565b50565b60006011836040518082805190602001908083835b602083101515614b5b5780518252602082019150602081019050602083039250614b36565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000614bee613c83565b1515614c62576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111515614d1c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6163636f756e74206e6f7420657869737400000000000000000000000000000081525060200191505060405180910390fd5b614d268183618520565b614d31600c83617b61565b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905560058290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060066001908060018154018082558091505090600182039060005260206000209060109182820401919006600202909192909190916101000a81548161ffff021916908361ffff160217905550507f238498021d519fc2d1325fb79524857f9a5c00286a5e71c1541a43561fec98d682604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b6000806000806011856040518082805190602001908083835b602083101515614ecd5780518252602082019150602081019050602083039250614ea8565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090508060000160009054906101000a900460ff1681600101548260020154935093509350509193909250565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac6c5251846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506040805180830381600087803b158015614feb57600080fd5b505af1158015614fff573d6000803e3d6000fd5b505050506040513d604081101561501557600080fd5b81019080805190602001909291908051906020019092919050505091509150915091565b615041613c83565b15156150b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b60046000600460008360ff1660ff16815260200190815260200160002054141515156150e057600080fd5b615102600460008360ff1660ff1681526020019081526020016000205461715f565b151561510d57600080fd5b6151d3601560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660168054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156151c95780601f1061519e576101008083540402835291602001916151c9565b820191906000526020600020905b8154815290600101906020018083116151ac57829003601f168201915b50505050506186d9565b6151f5600460008360ff1660ff168152602001908152602001600020546177be565b151561520057600080fd5b600460008260ff1660ff1681526020019081526020016000206000905550565b6000806000806000601260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000887bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020935060118460405180828054600181600116156101000203166002900480156153165780601f106152f4576101008083540402835291820191615316565b820191906000526020600020905b815481529060010190602001808311615302575b50509150509081526020016040518091039020925060008360000160009054906101000a900460ff1660ff16141561535157600194506153d2565b8260000160009054906101000a900460ff1691508260030160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050600160ff168260ff1614156153cd578094506153d2565b801594505b505050509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156154a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f596f7520617265206e6f742061646d696e00000000000000000000000000000081525060200191505060405180910390fd5b6154ab8282617f3e565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515615575576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f596f7520617265206e6f742061646d696e00000000000000000000000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f81c40df530c7b3f6fe84403f586f41d461f96342dacbcd44ac6f0eb80f88970460405160405180910390a35050565b60003373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515615752576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f596f7520617265206e6f742061646d696e00000000000000000000000000000081525060200191505060405180910390fd5b61575d838383618a42565b505050565b60008060006003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636900187d6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016040805180830381600087803b15801561580057600080fd5b505af1158015615814573d6000803e3d6000fd5b505050506040513d604081101561582a57600080fd5b8101908080519060200190929190805190602001909291905050509250925050915091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515615913576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f596f7520617265206e6f742061646d696e00000000000000000000000000000081525060200191505060405180910390fd5b61591d8282618281565b5050565b615929613c83565b151561599d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f","","9080838360005b838110156169a0578082015181840152602081019050616985565b50505050905090810190601f1680156169cd5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050505050565b6169ea613c83565b1515616a5e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b60016000806000600460008560ff1660ff16815260200190815260200160002054141515616af4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f7265717565737420616c7265616479206163746976650000000000000000000081525060200191505060405180910390fd5b616afe8333616f1c565b91509150600081111515616b7a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f5265676973746572206964206661696c6564000000000000000000000000000081525060200191505060405180910390fd5b80600460008560ff1660ff1681526020019081526020016000208190555083600760026101000a81548161ffff021916908361ffff1602179055507fbf78b5f34aec236b9208ca42f92bd676165c68355cef1758e905daf75cce13aa84604051808261ffff1661ffff16815260200191505060405180910390a150505050565b600080600080600080600080339650600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac6c5251886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506040805180830381600087803b158015616cc557600080fd5b505af1158015616cd9573d6000803e3d6000fd5b505050506040513d6040811015616cef57600080fd5b81019080805190602001909291908051906020019092919050505095509550600193506000925060008661ffff161415616d2c5760009350616e86565b600360008a815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915060008273ffffffffffffffffffffffffffffffffffffffff161415616d8a5760009350616e85565b8190508073ffffffffffffffffffffffffffffffffffffffff1663e560ca4388886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018261ffff1661ffff168152602001925050506040805180830381600087803b158015616e3757600080fd5b505af1158015616e4b573d6000803e3d6000fd5b505050506040513d6040811015616e6157600080fd5b81019080805190602001909291908051906020019092919050505080945081955050505b5b8673ffffffffffffffffffffffffffffffffffffffff16897febe4dc679cdbfe16b4f5276752b8a8394e6eab05e565e44e0815fc8379ad3d37863060405180831515151581526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a383975050505050505050919050565b600080600160008154809291906001019190505550616f3e6001548585618fc5565b600154915091509250929050565b60008173ffffffffffffffffffffffffffffffffffffffff1614151515617001576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f4c6962416464726573735365743a2076616c75652063616e277420626520307881526020017f300000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61700b8282619292565b1515156170a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f4c6962416464726573735365743a2076616c756520616c72656164792065786981526020017f73747320696e20746865207365742e000000000000000000000000000000000081525060400191505060405180910390fd5b816001018190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081600101805490508260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000806000806003600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156171be5760009250617360565b6003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff16638c542ddf856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561726357600080fd5b505af1158015617277573d6000803e3d6000fd5b505050506040513d602081101561728d57600080fd5b8101908080519060200190929190505050905060011515811515141561735c576003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16847f410b46f567eb79383667e25a31d877045f2ac0dbd2315b1f6d85afe9455b89e930604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a35b8092505b5050919050565b6000806011836040518082805190602001908083835b6020831015156173a2578051825260208201915060208101905060208303925061737d565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020915060008260000160009054906101000a900460ff1660ff16141515156173fb57600080fd5b836040518082805190602001908083835b602083101515617431578051825260208201915060208101905060208303925061740c565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090508160040160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16151561750957600080fd5b60008260040160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055508160020160008154809291906001900391905055506020604051908101604052806000815250601260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000209080519060200190617679929190619347565b507f99733eb68fd342df4ae81ac2f9d4b1f5fa20fb9f6f2c398224e3a65726b6d78c858585604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156177145780820151818401526020810190506176f9565b50505050905090810190601f1680156177415780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561777a57808201518184015260208101905061775f565b50505050905090810190601f1680156177a75780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15050505050565b60008060006001915060006003600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156178225760009150617937565b6003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16632e49d78b60026040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260ff168152602001915050600060405180830381600087803b1580156178cb57600080fd5b505af11580156178df573d6000803e3d6000fd5b5050505060006003600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b811515847f93d40816dd86538ee527eee904fe366f1a5377b07417493a74dfb9b163fd80f130604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffff","","","ffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe9babf7227595470b3626ae5ccf58b60155b302e762cffc79c52bfd8a800c53c60405160405180910390a461136b806100c56000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313af40351461009e5780631400a813146100e1578063793e64101461014a5780637f3c816014610193578063ac6c5251146101c6578063b2bdfa7b14610234578063d428cffc1461028b578063d58846371461034e578063f22d9bc5146103e8575b600080fd5b3480156100aa57600080fd5b506100df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104b7565b005b3480156100ed57600080fd5b50610130600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff169060200190929190505050610676565b604051808215151515815260200191505060405180910390f35b34801561015657600080fd5b50610179600480360381019080803561ffff16906020019092919050505061080c565b604051808215151515815260200191505060405180910390f35b34801561019f57600080fd5b506101a861091e565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156101d257600080fd5b50610207600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610932565b604051808361ffff1661ffff1681526020018261ffff1661ffff1681526020019250505060405180910390f35b34801561024057600080fd5b50610249610963565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561029757600080fd5b506102a0610988565b604051808461ffff1661ffff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156102f55780820151818401526020810190506102da565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561033757808201518184015260208101905061031c565b505050509050019550505050505060405180910390f35b34801561035a57600080fd5b506103ce60048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803561ffff169060200190929190803561ffff1690602001909291905050506109be565b604051808215151515815260200191505060405180910390f35b3480156103f457600080fd5b5061049d6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803561ffff169060200190929190505050610cb2565b604051808215151515815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fe9babf7227595470b3626ae5ccf58b60155b302e762cffc79c52bfd8a800c53c60405160405180910390a450565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610762576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61077883836001610ff89092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167f2c00e0bbfed7415a2cfaabe8c8c0c4e511702b7ede4a3de9ff3e4352ab2b760d8330604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a26001905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b81600460006101000a81548161ffff021916908361ffff16021790555060019050919050565b600460009054906101000a900461ffff1681565b60008061094983600161119b90919063ffffffff16565b600460009054906101000a900461ffff1691509150915091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060608060608061099a6001611229565b91509150600460009054906101000a900461ffff1682829450945094505050909192565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610aab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008551111515610b24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f496c6c6567616c2077686f73000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008461ffff16111515610ba0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496c6c6567616c2077656967687421000000000000000000000000000000000081525060200191505060405180910390fd5b82600460006101000a81548161ffff021916908361ffff160217905550600090505b8451811015610ca657610bf88582815181101515610bdc57fe5b90602001906020020151856001610ff89092919063ffffffff16565b8481815181101515610c0657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167f2c00e0bbfed7415a2cfaabe8c8c0c4e511702b7ede4a3de9ff3e4352ab2b760d8530604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a28080600101915050610bc2565b60019150509392505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008551118015610db1575083518551145b1515610e25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f496c6c6567616c2061727261797300000000000000000000000000000000000081525060200191505060405180910390fd5b82600460006101000a81548161ffff021916908361ffff160217905550600090505b8451811015610fec5760008482815181101515610e6057fe5b9060200190602002015161ffff16111515610ee3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496c6c6567616c2077656967687421000000000000000000000000000000000081525060200191505060405180910390fd5b610f278582815181101515610ef457fe5b906020019060200201518583815181101515610f0c57fe5b906020019060200201516001610ff89092919063ffffffff16565b8481815181101515610f3557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167f2c00e0bbfed7415a2cfaabe8c8c0c4e511702b7ede4a3de9ff3e4352ab2b760d8583815181101515610f8457fe5b90602001","","cb672edd31fe30604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a3600260009054906101000a900461ffff1661ffff16600460009054906101000a900461ffff1661ffff16101515610ad257610ad16001610619565b5b6001600460009054906101000a900461ffff16925092505b509250929050565b60008060008060008060006001546004809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900461ffff1630600460009054906101000a900461ffff16600460039054906101000a900460ff16600460029054906101000a900460ff168393509650965096509650965096509650909192939495965600a165627a7a72305820007955acfbb6c083acddffda917d11e6b52c753276dcdd7b1b600a10c06fa86a0029a165627a7a7230582020f237fe07f1ddf0079aacfd1b8d147fa6566f3a6d16338f5b0cbe441833a64700296080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe9babf7227595470b3626ae5ccf58b60155b302e762cffc79c52bfd8a800c53c60405160405180910390a461136b806100c56000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313af40351461009e5780631400a813146100e1578063793e64101461014a5780637f3c816014610193578063ac6c5251146101c6578063b2bdfa7b14610234578063d428cffc1461028b578063d58846371461034e578063f22d9bc5146103e8575b600080fd5b3480156100aa57600080fd5b506100df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104b7565b005b3480156100ed57600080fd5b50610130600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff169060200190929190505050610676565b604051808215151515815260200191505060405180910390f35b34801561015657600080fd5b50610179600480360381019080803561ffff16906020019092919050505061080c565b604051808215151515815260200191505060405180910390f35b34801561019f57600080fd5b506101a861091e565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156101d257600080fd5b50610207600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610932565b604051808361ffff1661ffff1681526020018261ffff1661ffff1681526020019250505060405180910390f35b34801561024057600080fd5b50610249610963565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561029757600080fd5b506102a0610988565b604051808461ffff1661ffff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156102f55780820151818401526020810190506102da565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561033757808201518184015260208101905061031c565b505050509050019550505050505060405180910390f35b34801561035a57600080fd5b506103ce60048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803561ffff169060200190929190803561ffff1690602001909291905050506109be565b604051808215151515815260200191505060405180910390f35b3480156103f457600080fd5b5061049d6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803561ffff169060200190929190505050610cb2565b604051808215151515815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fe9babf7227595470b3626ae5ccf58b60155b302e762cffc79c52bfd8a800c53c60405160405180910390a450565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610762576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61077883836001610ff89092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167f2c00e0bbfed7415a2cfaabe8c8c0c4e511702b7ede4a3de9ff3e4352ab2b760d8330604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a26001905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b81600460006101000a81548161ffff021916908361ffff16021790555060019050919050565b600460009054906101000a900461ffff1681565b60008061094983600161119b90919063ffffffff16565b600460009054906101000a900461ffff1691509150915091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060608060608061099a6001611229565b91509150600460009054906101000a900461ffff1682829450945094505050909192565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610aab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008551111515610b24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f496c6c6567616c2077686f73000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008461ffff16111515610ba0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496c6c6567616c2077656967687421000000000000000000000000000000000081525060200191505060405180910390fd5b82600460006101000a81548161ffff021916908361ffff160217905550600090505b8451811015610ca657610bf88582815181101515610bdc57fe5b90602001906020020151856001610ff89092919063ffffffff16565b8481815181101515610c0657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167f2c00e0bbfed7415a2cfaabe8c8c0c4e511702b7ede4a3de9ff3e4352ab2b760d8530604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a28080600101915050610bc2565b60019150509392505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008551118015610db1575083518551145b1515","610e25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f496c6c6567616c2061727261797300000000000000000000000000000000000081525060200191505060405180910390fd5b82600460006101000a81548161ffff021916908361ffff160217905550600090505b8451811015610fec5760008482815181101515610e6057fe5b9060200190602002015161ffff16111515610ee3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496c6c6567616c2077656967687421000000000000000000000000000000000081525060200191505060405180910390fd5b610f278582815181101515610ef457fe5b906020019060200201518583815181101515610f0c57fe5b906020019060200201516001610ff89092919063ffffffff16565b8481815181101515610f3557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167f2c00e0bbfed7415a2cfaabe8c8c0c4e511702b7ede4a3de9ff3e4352ab2b760d8583815181101515610f8457fe5b9060200190602002015130604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a28080600101915050610e47565b60019150509392505050565b60008360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561115057836001018390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508360020182908060018154018082558091505090600182039060005260206000209060109182820401919006600202909192909190916101000a81548161ffff021916908361ffff1602179055505083600101805490508460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611195565b81846002016001830381548110151561116557fe5b90600052602060002090601091828204019190066002026101000a81548161ffff021916908361ffff1602179055505b50505050565b60008060008460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915084600201600183038154811015156111f857fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff169050809250505092915050565b6060808260010183600201818054806020026020016040519081016040528092919081815260200182805480156112b557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161126b575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561132f57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116112f65790505b50505050509050915091509150915600a165627a7a72305820229c7b013f3416607515345a81f2c2d0b4f05740e30798960275b71d82497fa70029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","80601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612e37565b005b3480156109c957600080fd5b506109eb600480360381019080803560ff169060200190929190505050612f0b565b005b3480156109f957600080fd5b50610a2e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612f93565b005b348015610a3c57600080fd5b50610afd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613194565b005b348015610b0b57600080fd5b50610b146134fe565b60405180806020018360ff1660ff168152602001828103825284818151815260200191508051906020019080838360005b83811015610b60578082015181840152602081019050610b45565b50505050905090810190601f168015610b8d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b348015610ba857600080fd5b50610bb1613634565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610bf4578082015181840152602081019050610bd9565b505050509050019250505060405180910390f35b348015610c1457600080fd5b50610c8f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613645565b005b348015610c9d57600080fd5b50610ca661392a565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610d18578082015181840152602081019050610cfd565b50505050905090810190601f168015610d455780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b348015610d6057600080fd5b50610d69613a73565b005b348015610d7757600080fd5b50610d80613c5a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610dce57600080fd5b50610dd7613c83565b604051808215151515815260200191505060405180910390f35b348015610dfd57600080fd5b50610e78600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613d9c565b005b348015610e8657600080fd5b50610ebb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614081565b604051808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff1661ffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018461ffff1661ffff1681526020018360ff1660ff1681526020018260ff1660ff16815260200197505050505050505060405180910390f35b348015610f7b57600080fd5b50610f8461416a565b005b348015610f9257600080fd5b50610f9b6143c9565b6040518082815260200191505060405180910390f35b348015610fbd57600080fd5b50610fc66143d3565b005b348015610fd457600080fd5b50610fdd6145a7565b005b348015610feb57600080fd5b50610ff4614950565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561106657808201518184015260208101905061104b565b50505050905090810190601f1680156110935780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156110ae57600080fd5b506110d0600480360381019080803560ff169060200190929190505050614a99565b005b3480156110de57600080fd5b50611159600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614b21565b604051808215151515815260200191505060405180910390f35b34801561117f57600080fd5b506111b4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614be4565b005b3480156111c257600080fd5b5061121d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050614e8f565b604051808460ff1660ff168152602001838152602001828152602001935050505060405180910390f35b34801561125357600080fd5b50611288600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614f2c565b604051808361ffff1661ffff1681526020018261ffff1661ffff1681526020019250505060405180910390f35b3480156112c157600080fd5b506112ca615039565b005b3480156112d857600080fd5b50611356600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050615220565b604051808215151515815260200191505060405180910390f35b34801561137c57600080fd5b506113f7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506153dd565b005b34801561140557600080fd5b5061143a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506154af565b005b34801561144857600080fd5b50611451615637565b604051808215151515815260200191505060405180910390f35b34801561147757600080fd5b50611538600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061568e565b005b34801561154657600080fd5b5061156560048036038101908080359060200190929190505050615762565b604051808360ff1660ff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b3480156115c057600080fd5b50611628600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff16906020019092919050505061584f565b005b34801561163657600080fd5b506116d16004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050615921565b005b3480156116df57600080fd5b50611714600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050615bcd565b005b34801561172257600080fd5b5061172b615d65565b005b34801561173957600080fd5b50611742615fe7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561179057600080fd5b506117b2600480360381019080803560ff169060200190929190505050616011565b604051808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff1661ffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018461ffff1661ffff1681526020018360ff1660ff1681526020018260ff1660ff16815260200197505050505050505060405180910390f35b34801561187257600080fd5b506118a7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061607f565b604051808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff1661ffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018461ffff1661ffff1681526020018360ff1660ff1681526020018260ff1660ff16815260200197505050505050505060405180910390f35b34801561196757600080fd5b50611a28600480360381019080803573ffffffffffffff","ffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050616168565b005b348015611a3657600080fd5b50611ab1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506164d2565b005b348015611abf57600080fd5b50611af4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506165a4565b005b348015611b0257600080fd5b50611b0b616738565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015611b4e578082015181840152602081019050611b33565b505050509050019250505060405180910390f35b348015611b6e57600080fd5b50611bd6600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff169060200190929190505050616749565b005b348015611be457600080fd5b50611c07600480360381019080803561ffff1690602001909291905050506169e2565b005b6000611c13613c83565b1515611c87576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111515611cd857600080fd5b611ce181616bfa565b507f82c2f0d91d22bfb8e26f4299be0e648fdb4b0423222f01c3ae22246448f4800d82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b600080611d54613c83565b1515611dc8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b6000600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141515611e1657600080fd5b611e22600b6000616f1c565b9150915080600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e75600c84616f4c565b7fd4f08b86ca8b49e744dd07c80d43eba92b8add28d15bf6ad2f930a22bd3f02298382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1505050565b600080600080600080600080600360008a815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663f28676f46040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160e060405180830381600087803b158015611f8b57600080fd5b505af1158015611f9f573d6000803e3d6000fd5b505050506040513d60e0811015611fb557600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050975097509750975097509750975050919395979092949650565b612024613c83565b1515612098576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b60076000600460008360ff1660ff16815260200190815260200160002054141515156120c357600080fd5b6120e5600460008360ff1660ff1681526020019081526020016000205461715f565b15156120f057600080fd5b612251601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601d8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121ac5780601f10612181576101008083540402835291602001916121ac565b820191906000526020600020905b81548152906001019060200180831161218f57829003601f168201915b5050505050601e8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122475780601f1061221c57610100808354040283529160200191612247565b820191906000526020600020905b81548152906001019060200180831161222a57829003601f168201915b5050505050617367565b612273600460008360ff1660ff168152602001908152602001600020546177be565b151561227e57600080fd5b600460008260ff1660ff1681526020019081526020016000206000905550565b60006060806122ab613c83565b151561231f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601d601e818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123db5780601f106123b0576101008083540402835291602001916123db565b820191906000526020600020905b8154815290600101906020018083116123be57829003601f168201915b50505050509150808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124775780601f1061244c57610100808354040283529160200191612477565b820191906000526020600020905b81548152906001019060200180831161245a57829003601f168201915b50505050509050925092509250909192565b606080600060056006600760009054906101000a900461ffff168280548060200260200160405190810160405280929190818152602001828054801561252457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116124da575b505050505092508180548060200260200160405190810160405280929190818152602001828054801561259e57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116125655790505b50505050509150925092509250909192565b60006060806125bd613c83565b1515612631576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660186019818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126ed5780601f106126c2576101008083540402835291602001916126ed565b820191906000526020600020905b8154815290600101906020018083116126d057829003601f168201915b50505050509150808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127895780601f1061275e57610100808354040283529160200191612789565b820191906000526020600020905b81548152906001019060200180831161276c57829003601f168201915b50505050509050925092509250909192565b60006127a5613c83565b1515612819576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115156128d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f6163636f756e74206e6f742070656e64696e670000000000000000000000000081525060200191505060405180910390fd5b6128dc81616bfa565b507fff56a9fd183513422e403a8f1fa839cbf88bec53a3a2e4220758bc1a5ee22bbd82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b60008061294f613c83565b15156129c3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401","8080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150600082111515612a1457600080fd5b612a1e82846179a8565b612a29600f84617b61565b600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002050600090505b600580549050811015612c34578273ffffffffffffffffffffffffffffffffffffffff16600582815481101515612aa157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612c27576005600160058054905003815481101515612aff57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600582815481101515612b3957fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506006600160068054905003815481101515612b9857fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff16600682815481101515612bcb57fe5b90600052602060002090601091828204019190066002026101000a81548161ffff021916908361ffff1602179055506005805480919060019003612c0f91906192e1565b506006805480919060019003612c25919061930d565b505b8080600101915050612a6e565b7fc57d505fc7b7af32e8113bebe7f23b591534218bde0b00c48189eab87629bef383604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1505050565b60006011846040518082805190602001908083835b602083101515612cd65780518252602082019150602081019050602083039250612cb1565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836040518082805190602001908083835b602083101515612d815780518252602082019150602081019050602083039250612d5c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff1690509392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612efb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f596f7520617265206e6f742061646d696e00000000000000000000000000000081525060200191505060405180910390fd5b612f06838383617367565b505050565b612f13613c83565b1515612f87576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b612f9081617da0565b50565b6000612f9d613c83565b1515613011576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115156130cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f6163636f756e74206e6f742070656e64696e670000000000000000000000000081525060200191505060405180910390fd5b6130d4816177be565b15156130df57600080fd5b6130ea600c83617b61565b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090557f47a2f9e0452e8f312a3cdc6795d16c324a810d1feffbc30c7c3b40d95fee207d82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b61319c613c83565b1515613210576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b60076000806000600460008560ff1660ff168152602001908152602001600020541415156132a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f7265717565737420616c7265616479206163746976650000000000000000000081525060200191505060405180910390fd5b6132b08333616f1c565b9150915060008111151561332c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f5265676973746572206964206661696c6564000000000000000000000000000081525060200191505060405180910390fd5b80600460008560ff1660ff1681526020019081526020016000208190555085601c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084601d90805190602001906133a1929190619347565b5083601e90805190602001906133b8929190619347565b507f4cd07ab46f28195edb83c2f1cba6fbc3c8115e38fec7024e50aa5c9f25c83380868686604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015613453578082015181840152602081019050613438565b50505050905090810190601f1680156134805780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156134b957808201518184015260208101905061349e565b50505050905090810190601f1680156134e65780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1505050505050565b6060600061350a613c83565b151561357e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b6014601560009054906101000a900460ff16818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156136255780601f106135fa57610100808354040283529160200191613625565b820191906000526020600020905b81548152906001019060200180831161360857829003601f168201915b50505050509150915091509091565b6060613640600f617e53565b905090565b61364d613c83565b15156136c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b60066000806000600460008560ff1660ff16815260200190815260200160002054141515613757576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f7265717565737420616c7265616479206163746976650000000000000000000081525060200191505060405180910390fd5b6137618333616f1c565b915091506000811115156137dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f5265676973746572206964206661696c6564000000000000000000000000000081525060200191505060405180910390fd5b80600460008560ff1660ff1681526020019081526020016000208190555084601a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083601b9080519060200190613852929190619347565b507f213deb73372a11fd3bafce3da5bba8fe2586c11000b2ea9650f630a643aa4c1d8585604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156138e85780820151818401526020810190506138cd565b50505050905090810190601f1680156139155780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050505050565b60006060613936613c83565b15156139aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f75206172","","000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601b808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614a8a5780601f10614a5f57610100808354040283529160200191614a8a565b820191906000526020600020905b815481529060010190602001808311614a6d57829003601f168201915b50505050509050915091509091565b614aa1613c83565b1515614b15576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b614b1e81618497565b50565b60006011836040518082805190602001908083835b602083101515614b5b5780518252602082019150602081019050602083039250614b36565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000614bee613c83565b1515614c62576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111515614d1c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6163636f756e74206e6f7420657869737400000000000000000000000000000081525060200191505060405180910390fd5b614d268183618520565b614d31600c83617b61565b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905560058290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060066001908060018154018082558091505090600182039060005260206000209060109182820401919006600202909192909190916101000a81548161ffff021916908361ffff160217905550507f238498021d519fc2d1325fb79524857f9a5c00286a5e71c1541a43561fec98d682604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b6000806000806011856040518082805190602001908083835b602083101515614ecd5780518252602082019150602081019050602083039250614ea8565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090508060000160009054906101000a900460ff1681600101548260020154935093509350509193909250565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac6c5251846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506040805180830381600087803b158015614feb57600080fd5b505af1158015614fff573d6000803e3d6000fd5b505050506040513d604081101561501557600080fd5b81019080805190602001909291908051906020019092919050505091509150915091565b615041613c83565b15156150b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b60046000600460008360ff1660ff16815260200190815260200160002054141515156150e057600080fd5b615102600460008360ff1660ff1681526020019081526020016000205461715f565b151561510d57600080fd5b6151d3601560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660168054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156151c95780601f1061519e576101008083540402835291602001916151c9565b820191906000526020600020905b8154815290600101906020018083116151ac57829003601f168201915b50505050506186d9565b6151f5600460008360ff1660ff168152602001908152602001600020546177be565b151561520057600080fd5b600460008260ff1660ff1681526020019081526020016000206000905550565b6000806000806000601260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000887bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020935060118460405180828054600181600116156101000203166002900480156153165780601f106152f4576101008083540402835291820191615316565b820191906000526020600020905b815481529060010190602001808311615302575b50509150509081526020016040518091039020925060008360000160009054906101000a900460ff1660ff16141561535157600194506153d2565b8260000160009054906101000a900460ff1691508260030160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050600160ff168260ff1614156153cd578094506153d2565b801594505b505050509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156154a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f596f7520617265206e6f742061646d696e00000000000000000000000000000081525060200191505060405180910390fd5b6154ab8282617f3e565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515615575576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f596f7520617265206e6f742061646d696e00000000000000000000000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f81c40df530c7b3f6fe84403f586f41d461f96342dacbcd44ac6f0eb80f88970460405160405180910390a35050565b60003373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515615752576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f596f7520617265206e6f742061646d696e00000000000000000000000000000081525060200191505060405180910390fd5b61575d838383618a42565b505050565b60008060006003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636900187d6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016040805180830381600087803b15801561580057600080fd5b505af1158015615814573d6000803e3d6000fd5b505050506040513d604081101561582a57600080fd5b8101908080519060200190929190805190602001909291905050509250925050915091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515615913576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f596f7520617265206e6f742061646d696e00000000000000000000000000000081525060200191505060405180910390fd5b61591d8282618281565b5050565b615929613c83565b151561599d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f","7273000000000000000000000081525060200191505060405180910390fd5b60026000806000600460008560ff1660ff16815260200190815260200160002054141515615a33576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f7265717565737420616c7265616479206163746976650000000000000000000081525060200191505060405180910390fd5b615a3d8333616f1c565b91509150600081111515615ab9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f5265676973746572206964206661696c6564000000000000000000000000000081525060200191505060405180910390fd5b80600460008560ff1660ff168152602001908152602001600020819055508460099080519060200190615aed929190619489565b5083600a9080519060200190615b04929190619513565b507fb1a0082653767af00d5a7f1d965bdbf8b8ad98fd31f08c7bfe4c37ff3ca4c3db8585604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015615b6f578082015181840152602081019050615b54565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015615bb1578082015181840152602081019050615b96565b5050505090500194505050505060405180910390a15050505050565b6000615bd7613c83565b1515615c4b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111515615c9c57600080fd5b615ca5816177be565b1515615cb057600080fd5b615cbb600f83617b61565b600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090557fd14f0423caf2115c9e3c41af1f60605c54594f1b5efaf7a3f6b2a7c48cb0841b82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b615d6d613c83565b1515615de1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b60056000600460008360ff1660ff1681526020019081526020016000205414151515615e0c57600080fd5b615e2e600460008360ff1660ff1681526020019081526020016000205461715f565b1515615e3957600080fd5b615f9a601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660188054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015615ef55780601f10615eca57610100808354040283529160200191615ef5565b820191906000526020600020905b815481529060010190602001808311615ed857829003601f168201915b505050505060198054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015615f905780601f10615f6557610100808354040283529160200191615f90565b820191906000526020600020905b815481529060010190602001808311615f7357829003601f168201915b5050505050618a42565b615fbc600460008360ff1660ff168152602001908152602001600020546177be565b1515615fc757600080fd5b600460008260ff1660ff1681526020019081526020016000206000905550565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600080600080600080600460008a60ff1660ff168152602001908152602001600020541415151561604457600080fd5b616066600460008a60ff1660ff16815260200190815260200160002054611ee5565b9650965096509650965096509650919395979092949650565b600080600080600080600080600b60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111515616145576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6163636f756e74206e6f7420657869737400000000000000000000000000000081525060200191505060405180910390fd5b61614e81611ee5565b975097509750975097509750975050919395979092949650565b616170613c83565b15156161e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b60056000806000600460008560ff1660ff1681526020019081526020016000205414151561627a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f7265717565737420616c7265616479206163746976650000000000000000000081525060200191505060405180910390fd5b6162848333616f1c565b91509150600081111515616300576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f5265676973746572206964206661696c6564000000000000000000000000000081525060200191505060405180910390fd5b80600460008560ff1660ff1681526020019081526020016000208190555085601760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460189080519060200190616375929190619347565b50836019908051906020019061638c929190619347565b507fd0aaaab8a852d02282f274fca46859a93629651d277f7070e6766f93a82aee39868686604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561642757808201518184015260208101905061640c565b50505050905090810190601f1680156164545780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561648d578082015181840152602081019050616472565b50505050905090810190601f1680156164ba5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515616596576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f596f7520617265206e6f742061646d696e00000000000000000000000000000081525060200191505060405180910390fd5b6165a082826186d9565b5050565b6000806165af613c83565b1515616623576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b6000600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561667157600080fd5b61667d600c6000616f1c565b9150915080600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506166d0600f84616f4c565b7fbe8e2e41ba1065826815fcb05959316e6e6ba9b3b447de9d59c436620b0c57ad83604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1505050565b6060616744600c617e53565b905090565b616751613c83565b15156167c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b60036000806000600460008560ff1660ff1681526020019081526020016000205414151561685b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f7265717565737420616c7265616479206163746976650000000000000000000081525060200191505060405180910390fd5b6168658333616f1c565b915091506000811115156168e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f5265676973746572206964206661696c6564000000000000000000000000000081525060200191505060405180910390fd5b80600460008560ff1660ff168152602001908152602001600020819055508460149080519060200190616915929190619347565b5083601560006101000a81548160ff021916908360ff1602179055507f357b9926c35739dbd0784f173b325b56d856a8560b4a82b0c2855e2a6303d86a858560405180806020018360ff1660ff16815260200182810382528481815181526020019150805190602001","9080838360005b838110156169a0578082015181840152602081019050616985565b50505050905090810190601f1680156169cd5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050505050565b6169ea613c83565b1515616a5e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b60016000806000600460008560ff1660ff16815260200190815260200160002054141515616af4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f7265717565737420616c7265616479206163746976650000000000000000000081525060200191505060405180910390fd5b616afe8333616f1c565b91509150600081111515616b7a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f5265676973746572206964206661696c6564000000000000000000000000000081525060200191505060405180910390fd5b80600460008560ff1660ff1681526020019081526020016000208190555083600760026101000a81548161ffff021916908361ffff1602179055507fbf78b5f34aec236b9208ca42f92bd676165c68355cef1758e905daf75cce13aa84604051808261ffff1661ffff16815260200191505060405180910390a150505050565b600080600080600080600080339650600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac6c5251886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506040805180830381600087803b158015616cc557600080fd5b505af1158015616cd9573d6000803e3d6000fd5b505050506040513d6040811015616cef57600080fd5b81019080805190602001909291908051906020019092919050505095509550600193506000925060008661ffff161415616d2c5760009350616e86565b600360008a815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915060008273ffffffffffffffffffffffffffffffffffffffff161415616d8a5760009350616e85565b8190508073ffffffffffffffffffffffffffffffffffffffff1663e560ca4388886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018261ffff1661ffff168152602001925050506040805180830381600087803b158015616e3757600080fd5b505af1158015616e4b573d6000803e3d6000fd5b505050506040513d6040811015616e6157600080fd5b81019080805190602001909291908051906020019092919050505080945081955050505b5b8673ffffffffffffffffffffffffffffffffffffffff16897febe4dc679cdbfe16b4f5276752b8a8394e6eab05e565e44e0815fc8379ad3d37863060405180831515151581526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a383975050505050505050919050565b600080600160008154809291906001019190505550616f3e6001548585618fc5565b600154915091509250929050565b60008173ffffffffffffffffffffffffffffffffffffffff1614151515617001576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f4c6962416464726573735365743a2076616c75652063616e277420626520307881526020017f300000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61700b8282619292565b1515156170a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f4c6962416464726573735365743a2076616c756520616c72656164792065786981526020017f73747320696e20746865207365742e000000000000000000000000000000000081525060400191505060405180910390fd5b816001018190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081600101805490508260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000806000806003600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156171be5760009250617360565b6003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff16638c542ddf856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561726357600080fd5b505af1158015617277573d6000803e3d6000fd5b505050506040513d602081101561728d57600080fd5b8101908080519060200190929190505050905060011515811515141561735c576003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16847f410b46f567eb79383667e25a31d877045f2ac0dbd2315b1f6d85afe9455b89e930604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a35b8092505b5050919050565b6000806011836040518082805190602001908083835b6020831015156173a2578051825260208201915060208101905060208303925061737d565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020915060008260000160009054906101000a900460ff1660ff16141515156173fb57600080fd5b836040518082805190602001908083835b602083101515617431578051825260208201915060208101905060208303925061740c565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090508160040160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16151561750957600080fd5b60008260040160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055508160020160008154809291906001900391905055506020604051908101604052806000815250601260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000209080519060200190617679929190619347565b507f99733eb68fd342df4ae81ac2f9d4b1f5fa20fb9f6f2c398224e3a65726b6d78c858585604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156177145780820151818401526020810190506176f9565b50505050905090810190601f1680156177415780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561777a57808201518184015260208101905061775f565b50505050905090810190601f1680156177a75780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15050505050565b60008060006001915060006003600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156178225760009150617937565b6003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16632e49d78b60026040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260ff168152602001915050600060405180830381600087803b1580156178cb57600080fd5b505af11580156178df573d6000803e3d6000fd5b5050505060006003600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b811515847f93d40816dd86538ee527eee904fe366f1a5377b07417493a74dfb9b163fd80f130604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffff","","","ffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe9babf7227595470b3626ae5ccf58b60155b302e762cffc79c52bfd8a800c53c60405160405180910390a461136b806100c56000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313af40351461009e5780631400a813146100e1578063793e64101461014a5780637f3c816014610193578063ac6c5251146101c6578063b2bdfa7b14610234578063d428cffc1461028b578063d58846371461034e578063f22d9bc5146103e8575b600080fd5b3480156100aa57600080fd5b506100df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104b7565b005b3480156100ed57600080fd5b50610130600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff169060200190929190505050610676565b604051808215151515815260200191505060405180910390f35b34801561015657600080fd5b50610179600480360381019080803561ffff16906020019092919050505061080c565b604051808215151515815260200191505060405180910390f35b34801561019f57600080fd5b506101a861091e565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156101d257600080fd5b50610207600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610932565b604051808361ffff1661ffff1681526020018261ffff1661ffff1681526020019250505060405180910390f35b34801561024057600080fd5b50610249610963565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561029757600080fd5b506102a0610988565b604051808461ffff1661ffff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156102f55780820151818401526020810190506102da565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561033757808201518184015260208101905061031c565b505050509050019550505050505060405180910390f35b34801561035a57600080fd5b506103ce60048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803561ffff169060200190929190803561ffff1690602001909291905050506109be565b604051808215151515815260200191505060405180910390f35b3480156103f457600080fd5b5061049d6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803561ffff169060200190929190505050610cb2565b604051808215151515815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fe9babf7227595470b3626ae5ccf58b60155b302e762cffc79c52bfd8a800c53c60405160405180910390a450565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610762576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61077883836001610ff89092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167f2c00e0bbfed7415a2cfaabe8c8c0c4e511702b7ede4a3de9ff3e4352ab2b760d8330604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a26001905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b81600460006101000a81548161ffff021916908361ffff16021790555060019050919050565b600460009054906101000a900461ffff1681565b60008061094983600161119b90919063ffffffff16565b600460009054906101000a900461ffff1691509150915091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060608060608061099a6001611229565b91509150600460009054906101000a900461ffff1682829450945094505050909192565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610aab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008551111515610b24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f496c6c6567616c2077686f73000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008461ffff16111515610ba0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496c6c6567616c2077656967687421000000000000000000000000000000000081525060200191505060405180910390fd5b82600460006101000a81548161ffff021916908361ffff160217905550600090505b8451811015610ca657610bf88582815181101515610bdc57fe5b90602001906020020151856001610ff89092919063ffffffff16565b8481815181101515610c0657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167f2c00e0bbfed7415a2cfaabe8c8c0c4e511702b7ede4a3de9ff3e4352ab2b760d8530604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a28080600101915050610bc2565b60019150509392505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008551118015610db1575083518551145b1515610e25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f496c6c6567616c2061727261797300000000000000000000000000000000000081525060200191505060405180910390fd5b82600460006101000a81548161ffff021916908361ffff160217905550600090505b8451811015610fec5760008482815181101515610e6057fe5b9060200190602002015161ffff16111515610ee3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496c6c6567616c2077656967687421000000000000000000000000000000000081525060200191505060405180910390fd5b610f278582815181101515610ef457fe5b906020019060200201518583815181101515610f0c57fe5b906020019060200201516001610ff89092919063ffffffff16565b8481815181101515610f3557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167f2c00e0bbfed7415a2cfaabe8c8c0c4e511702b7ede4a3de9ff3e4352ab2b760d8583815181101515610f8457fe5b90602001","","cb672edd31fe30604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a3600260009054906101000a900461ffff1661ffff16600460009054906101000a900461ffff1661ffff16101515610ad257610ad16001610619565b5b6001600460009054906101000a900461ffff16925092505b509250929050565b60008060008060008060006001546004809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900461ffff1630600460009054906101000a900461ffff16600460039054906101000a900460ff16600460029054906101000a900460ff168393509650965096509650965096509650909192939495965600a165627a7a72305820007955acfbb6c083acddffda917d11e6b52c753276dcdd7b1b600a10c06fa86a0029a165627a7a7230582020f237fe07f1ddf0079aacfd1b8d147fa6566f3a6d16338f5b0cbe441833a64700296080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe9babf7227595470b3626ae5ccf58b60155b302e762cffc79c52bfd8a800c53c60405160405180910390a461136b806100c56000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313af40351461009e5780631400a813146100e1578063793e64101461014a5780637f3c816014610193578063ac6c5251146101c6578063b2bdfa7b14610234578063d428cffc1461028b578063d58846371461034e578063f22d9bc5146103e8575b600080fd5b3480156100aa57600080fd5b506100df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104b7565b005b3480156100ed57600080fd5b50610130600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff169060200190929190505050610676565b604051808215151515815260200191505060405180910390f35b34801561015657600080fd5b50610179600480360381019080803561ffff16906020019092919050505061080c565b604051808215151515815260200191505060405180910390f35b34801561019f57600080fd5b506101a861091e565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156101d257600080fd5b50610207600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610932565b604051808361ffff1661ffff1681526020018261ffff1661ffff1681526020019250505060405180910390f35b34801561024057600080fd5b50610249610963565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561029757600080fd5b506102a0610988565b604051808461ffff1661ffff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156102f55780820151818401526020810190506102da565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561033757808201518184015260208101905061031c565b505050509050019550505050505060405180910390f35b34801561035a57600080fd5b506103ce60048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803561ffff169060200190929190803561ffff1690602001909291905050506109be565b604051808215151515815260200191505060405180910390f35b3480156103f457600080fd5b5061049d6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803561ffff169060200190929190505050610cb2565b604051808215151515815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fe9babf7227595470b3626ae5ccf58b60155b302e762cffc79c52bfd8a800c53c60405160405180910390a450565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610762576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61077883836001610ff89092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167f2c00e0bbfed7415a2cfaabe8c8c0c4e511702b7ede4a3de9ff3e4352ab2b760d8330604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a26001905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b81600460006101000a81548161ffff021916908361ffff16021790555060019050919050565b600460009054906101000a900461ffff1681565b60008061094983600161119b90919063ffffffff16565b600460009054906101000a900461ffff1691509150915091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060608060608061099a6001611229565b91509150600460009054906101000a900461ffff1682829450945094505050909192565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610aab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008551111515610b24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f496c6c6567616c2077686f73000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008461ffff16111515610ba0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496c6c6567616c2077656967687421000000000000000000000000000000000081525060200191505060405180910390fd5b82600460006101000a81548161ffff021916908361ffff160217905550600090505b8451811015610ca657610bf88582815181101515610bdc57fe5b90602001906020020151856001610ff89092919063ffffffff16565b8481815181101515610c0657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167f2c00e0bbfed7415a2cfaabe8c8c0c4e511702b7ede4a3de9ff3e4352ab2b760d8530604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a28080600101915050610bc2565b60019150509392505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008551118015610db1575083518551145b1515","610e25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f496c6c6567616c2061727261797300000000000000000000000000000000000081525060200191505060405180910390fd5b82600460006101000a81548161ffff021916908361ffff160217905550600090505b8451811015610fec5760008482815181101515610e6057fe5b9060200190602002015161ffff16111515610ee3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496c6c6567616c2077656967687421000000000000000000000000000000000081525060200191505060405180910390fd5b610f278582815181101515610ef457fe5b906020019060200201518583815181101515610f0c57fe5b906020019060200201516001610ff89092919063ffffffff16565b8481815181101515610f3557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167f2c00e0bbfed7415a2cfaabe8c8c0c4e511702b7ede4a3de9ff3e4352ab2b760d8583815181101515610f8457fe5b9060200190602002015130604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a28080600101915050610e47565b60019150509392505050565b60008360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561115057836001018390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508360020182908060018154018082558091505090600182039060005260206000209060109182820401919006600202909192909190916101000a81548161ffff021916908361ffff1602179055505083600101805490508460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611195565b81846002016001830381548110151561116557fe5b90600052602060002090601091828204019190066002026101000a81548161ffff021916908361ffff1602179055505b50505050565b60008060008460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915084600201600183038154811015156111f857fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff169050809250505092915050565b6060808260010183600201818054806020026020016040519081016040528092919081815260200182805480156112b557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161126b575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561132f57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116112f65790505b50505050509050915091509150915600a165627a7a72305820229c7b013f3416607515345a81f2c2d0b4f05740e30798960275b71d82497fa70029"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"approveRemoveGovernorReq\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"requestAddGovernor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRequestInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeRemoveFunctionFromGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewRemoveFunctionToGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGovs\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint16[]\"},{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewAddFunctionToGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"approveAddGovernorReq\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"executeRemoveGovernorReq\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"string\"},{\"name\":\"contractAddr\",\"type\":\"address\"},{\"name\":\"func\",\"type\":\"string\"}],\"name\":\"containsFunction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_voteWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"},{\"name\":\"func\",\"type\":\"string\"},{\"name\":\"group\",\"type\":\"string\"}],\"name\":\"removeFunctionFromGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"deleteSingle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"deleteAddGovernorReq\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"},{\"name\":\"func\",\"type\":\"string\"},{\"name\":\"group\",\"type\":\"string\"}],\"name\":\"requestRemoveFunctionFromGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewCreateGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGovernorsToRemove\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"group\",\"type\":\"string\"}],\"name\":\"requestRemoveAccountFromGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewAddAccountToGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeRemoveAccountFromGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inGovs\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"group\",\"type\":\"string\"}],\"name\":\"requestAddAccountToGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRemoveGovRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeSetThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"opMode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeCreateGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeResetGovernAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewRemoveAccountToGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"approveSingle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"string\"},{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"containsAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"executeAddGovernorReq\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"string\"}],\"name\":\"getGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeAddAccountToGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"},{\"name\":\"sig\",\"type\":\"bytes4\"},{\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"canCallFunction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"group\",\"type\":\"string\"}],\"name\":\"removeAccountFromGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdminAddr\",\"type\":\"address\"}],\"name\":\"transferAdminAuth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"},{\"name\":\"func\",\"type\":\"string\"},{\"name\":\"group\",\"type\":\"string\"}],\"name\":\"addFunctionToGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRequestTxType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"string\"},{\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"createGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"functio","n\"},{\"constant\":false,\"inputs\":[{\"name\":\"governors\",\"type\":\"address[]\"},{\"name\":\"weights\",\"type\":\"uint16[]\"}],\"name\":\"requestResetGovernors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"deleteRemoveGovernorReq\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeAddFunctionToGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVoteWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"getRequestSingle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAddGovRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"},{\"name\":\"func\",\"type\":\"string\"},{\"name\":\"group\",\"type\":\"string\"}],\"name\":\"requestAddFunctionToGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"group\",\"type\":\"string\"}],\"name\":\"addAccountToGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"requestRemoveGovernor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGovernorsToAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"string\"},{\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"requestCreateGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newThreshold\",\"type\":\"uint16\"}],\"name\":\"requestSetThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"mode\",\"type\":\"uint256\"},{\"name\":\"accounts\",\"type\":\"address[]\"},{\"name\":\"weights\",\"type\":\"uint16[]\"},{\"name\":\"threshold\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"RequestCreateGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"string\"}],\"name\":\"RequestAddAccountToGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"func\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"string\"}],\"name\":\"RequestAddFunctionToGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"string\"}],\"name\":\"RequestRemoveAccountFromGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"func\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"string\"}],\"name\":\"RequestRemoveFunctionFromGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"CreateGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"string\"}],\"name\":\"AddAccountToGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"func\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"string\"}],\"name\":\"AddFunctionToGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"string\"}],\"name\":\"RemoveAccountFromGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"func\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"string\"}],\"name\":\"RemoveFunctionFromGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"weights\",\"type\":\"uint16[]\"},{\"indexed\":false,\"name\":\"threshold\",\"type\":\"uint16\"}],\"name\":\"InitWeightData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"threshold\",\"type\":\"uint16\"}],\"name\":\"RequestSetThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ExecuteSetThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"governors\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"weights\",\"type\":\"uint16[]\"}],\"name\":\"RequestResetGovernors\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ExecuteResetGovernAccounts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reqId\",\"type\":\"uint256\"}],\"name\":\"RequestAddGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DeleteAddGovernorReq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ApproveAddGovernorReq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExecuteAddGovernorReq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RequestRemoveGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DeleteRemoveGovernorReq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ApproveRemoveGovernorReq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExecuteRemoveGovernorReq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"ApproveSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"DeleteSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteWeight\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogSetVoteWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"txType\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"requestAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"threshold\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogUnregister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogApprove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogUnapprove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"requestAddress","\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogCanCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdminAuth\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_APPROVEREMOVEGOVERNORREQ = "approveRemoveGovernorReq";

    public static final String FUNC_REQUESTADDGOVERNOR = "requestAddGovernor";

    public static final String FUNC_GETREQUESTINFO = "getRequestInfo";

    public static final String FUNC_EXECUTEREMOVEFUNCTIONFROMGROUP = "executeRemoveFunctionFromGroup";

    public static final String FUNC_VIEWREMOVEFUNCTIONTOGROUP = "viewRemoveFunctionToGroup";

    public static final String FUNC_GETGOVS = "getGovs";

    public static final String FUNC_VIEWADDFUNCTIONTOGROUP = "viewAddFunctionToGroup";

    public static final String FUNC_APPROVEADDGOVERNORREQ = "approveAddGovernorReq";

    public static final String FUNC_EXECUTEREMOVEGOVERNORREQ = "executeRemoveGovernorReq";

    public static final String FUNC_CONTAINSFUNCTION = "containsFunction";

    public static final String FUNC__VOTEWEIGHT = "_voteWeight";

    public static final String FUNC_REMOVEFUNCTIONFROMGROUP = "removeFunctionFromGroup";

    public static final String FUNC_DELETESINGLE = "deleteSingle";

    public static final String FUNC_DELETEADDGOVERNORREQ = "deleteAddGovernorReq";

    public static final String FUNC_REQUESTREMOVEFUNCTIONFROMGROUP = "requestRemoveFunctionFromGroup";

    public static final String FUNC_VIEWCREATEGROUP = "viewCreateGroup";

    public static final String FUNC_GETGOVERNORSTOREMOVE = "getGovernorsToRemove";

    public static final String FUNC_REQUESTREMOVEACCOUNTFROMGROUP = "requestRemoveAccountFromGroup";

    public static final String FUNC_VIEWADDACCOUNTTOGROUP = "viewAddAccountToGroup";

    public static final String FUNC_EXECUTEREMOVEACCOUNTFROMGROUP = "executeRemoveAccountFromGroup";

    public static final String FUNC_GETADMIN = "getAdmin";

    public static final String FUNC_INGOVS = "inGovs";

    public static final String FUNC_REQUESTADDACCOUNTTOGROUP = "requestAddAccountToGroup";

    public static final String FUNC_GETREMOVEGOVREQUEST = "getRemoveGovRequest";

    public static final String FUNC_EXECUTESETTHRESHOLD = "executeSetThreshold";

    public static final String FUNC_OPMODE = "opMode";

    public static final String FUNC_EXECUTECREATEGROUP = "executeCreateGroup";

    public static final String FUNC_EXECUTERESETGOVERNACCOUNTS = "executeResetGovernAccounts";

    public static final String FUNC_VIEWREMOVEACCOUNTTOGROUP = "viewRemoveAccountToGroup";

    public static final String FUNC_APPROVESINGLE = "approveSingle";

    public static final String FUNC_CONTAINSACCOUNT = "containsAccount";

    public static final String FUNC_EXECUTEADDGOVERNORREQ = "executeAddGovernorReq";

    public static final String FUNC_GETGROUP = "getGroup";

    public static final String FUNC_GETWEIGHT = "getWeight";

    public static final String FUNC_EXECUTEADDACCOUNTTOGROUP = "executeAddAccountToGroup";

    public static final String FUNC_CANCALLFUNCTION = "canCallFunction";

    public static final String FUNC_REMOVEACCOUNTFROMGROUP = "removeAccountFromGroup";

    public static final String FUNC_TRANSFERADMINAUTH = "transferAdminAuth";

    public static final String FUNC_ISADMIN = "isAdmin";

    public static final String FUNC_ADDFUNCTIONTOGROUP = "addFunctionToGroup";

    public static final String FUNC_GETREQUESTTXTYPE = "getRequestTxType";

    public static final String FUNC_CREATEGROUP = "createGroup";

    public static final String FUNC_REQUESTRESETGOVERNORS = "requestResetGovernors";

    public static final String FUNC_DELETEREMOVEGOVERNORREQ = "deleteRemoveGovernorReq";

    public static final String FUNC_EXECUTEADDFUNCTIONTOGROUP = "executeAddFunctionToGroup";

    public static final String FUNC_GETVOTEWEIGHT = "getVoteWeight";

    public static final String FUNC_GETREQUESTSINGLE = "getRequestSingle";

    public static final String FUNC_GETADDGOVREQUEST = "getAddGovRequest";

    public static final String FUNC_REQUESTADDFUNCTIONTOGROUP = "requestAddFunctionToGroup";

    public static final String FUNC_ADDACCOUNTTOGROUP = "addAccountToGroup";

    public static final String FUNC_REQUESTREMOVEGOVERNOR = "requestRemoveGovernor";

    public static final String FUNC_GETGOVERNORSTOADD = "getGovernorsToAdd";

    public static final String FUNC_REQUESTCREATEGROUP = "requestCreateGroup";

    public static final String FUNC_REQUESTSETTHRESHOLD = "requestSetThreshold";

    public static final Event REQUESTCREATEGROUP_EVENT = new Event("RequestCreateGroup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event REQUESTADDACCOUNTTOGROUP_EVENT = new Event("RequestAddAccountToGroup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event REQUESTADDFUNCTIONTOGROUP_EVENT = new Event("RequestAddFunctionToGroup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event REQUESTREMOVEACCOUNTFROMGROUP_EVENT = new Event("RequestRemoveAccountFromGroup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event REQUESTREMOVEFUNCTIONFROMGROUP_EVENT = new Event("RequestRemoveFunctionFromGroup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CREATEGROUP_EVENT = new Event("CreateGroup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event ADDACCOUNTTOGROUP_EVENT = new Event("AddAccountToGroup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ADDFUNCTIONTOGROUP_EVENT = new Event("AddFunctionToGroup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event REMOVEACCOUNTFROMGROUP_EVENT = new Event("RemoveAccountFromGroup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event REMOVEFUNCTIONFROMGROUP_EVENT = new Event("RemoveFunctionFromGroup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event INITWEIGHTDATA_EVENT = new Event("InitWeightData", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<Uint16>() {}));
    ;

    public static final Event REQUESTSETTHRESHOLD_EVENT = new Event("RequestSetThreshold", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
    ;

    public static final Event EXECUTESETTHRESHOLD_EVENT = new Event("ExecuteSetThreshold", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event REQUESTRESETGOVERNORS_EVENT = new Event("RequestResetGovernors", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
    ;

    public static final Event EXECUTERESETGOVERNACCOUNTS_EVENT = new Event("ExecuteResetGovernAccounts", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event REQUESTADDGOVERNOR_EVENT = new Event("RequestAddGovernor", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DELETEADDGOVERNORREQ_EVENT = new Event("DeleteAddGovernorReq", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event APPROVEADDGOVERNORREQ_EVENT = new Event("ApproveAddGovernorReq", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event EXECUTEADDGOVERNORREQ_EVENT = new Event("ExecuteAddGovernorReq", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event REQUESTREMOVEGOVERNOR_EVENT = new Event("RequestRemoveGovernor", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event DELETEREMOVEGOVERNORREQ_EVENT = new Event("DeleteRemoveGovernorReq", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event APPROVEREMOVEGOVERNORREQ_EVENT = new Event("ApproveRemoveGovernorReq", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event EXECUTEREMOVEGOVERNORREQ_EVENT = new Event("ExecuteRemoveGovernorReq", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event APPROVESINGLE_EVENT = new Event("ApproveSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>(true) {}));
    ;

    public static final Event DELETESINGLE_EVENT = new Event("DeleteSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
    ;

    public static final Event LOGSETVOTEWEIGHT_EVENT = new Event("LogSetVoteWeight", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event LOGREGISTER_EVENT = new Event("LogRegister", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint8>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event LOGUNREGISTER_EVENT = new Event("LogUnregister", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Bool>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event LOGAPPROVE_EVENT = new Event("LogApprove", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event LOGUNAPPROVE_EVENT = new Event("LogUnapprove", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event LOGCANCALL_EVENT = new Event("LogCanCall", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event TRANSFERADMINAUTH_EVENT = new Event("TransferAdminAuth", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected AuthManager(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt approveRemoveGovernorReq(String account) {
        final Function function = new Function(
                FUNC_APPROVEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void approveRemoveGovernorReq(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPROVEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApproveRemoveGovernorReq(String account) {
        final Function function = new Function(
                FUNC_APPROVEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getApproveRemoveGovernorReqInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPROVEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt requestAddGovernor(String account) {
        final Function function = new Function(
                FUNC_REQUESTADDGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void requestAddGovernor(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTADDGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRequestAddGovernor(String account) {
        final Function function = new Function(
                FUNC_REQUESTADDGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRequestAddGovernorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REQUESTADDGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple7<BigInteger, String, BigInteger, String, BigInteger, BigInteger, BigInteger> getRequestInfo(BigInteger id) throws ContractException {
        final Function function = new Function(FUNC_GETREQUESTINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, String, BigInteger, String, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue());
    }

    public TransactionReceipt executeRemoveFunctionFromGroup() {
        final Function function = new Function(
                FUNC_EXECUTEREMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void executeRemoveFunctionFromGroup(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXECUTEREMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExecuteRemoveFunctionFromGroup() {
        final Function function = new Function(
                FUNC_EXECUTEREMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> viewRemoveFunctionToGroup() throws ContractException {
        final Function function = new Function(FUNC_VIEWREMOVEFUNCTIONTOGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue());
    }

    public Tuple3<List<String>, List<BigInteger>, BigInteger> getGovs() throws ContractException {
        final Function function = new Function(FUNC_GETGOVS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<Uint16>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<List<String>, List<BigInteger>, BigInteger>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                convertToNative((List<Uint16>) results.get(1).getValue()), 
                (BigInteger) results.get(2).getValue());
    }

    public Tuple3<String, String, String> viewAddFunctionToGroup() throws ContractException {
        final Function function = new Function(FUNC_VIEWADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue());
    }

    public TransactionReceipt approveAddGovernorReq(String account) {
        final Function function = new Function(
                FUNC_APPROVEADDGOVERNORREQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void approveAddGovernorReq(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPROVEADDGOVERNORREQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApproveAddGovernorReq(String account) {
        final Function function = new Function(
                FUNC_APPROVEADDGOVERNORREQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getApproveAddGovernorReqInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPROVEADDGOVERNORREQ, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt executeRemoveGovernorReq(String account) {
        final Function function = new Function(
                FUNC_EXECUTEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void executeRemoveGovernorReq(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXECUTEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExecuteRemoveGovernorReq(String account) {
        final Function function = new Function(
                FUNC_EXECUTEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getExecuteRemoveGovernorReqInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_EXECUTEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Boolean containsFunction(String group, String contractAddr, String func) throws ContractException {
        final Function function = new Function(FUNC_CONTAINSFUNCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(func)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public String _voteWeight() throws ContractException {
        final Function function = new Function(FUNC__VOTEWEIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt removeFunctionFromGroup(String contractAddr, String func, String group) {
        final Function function = new Function(
                FUNC_REMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(func), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeFunctionFromGroup(String contractAddr, String func, String group, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(func), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveFunctionFromGroup(String contractAddr, String func, String group) {
        final Function function = new Function(
                FUNC_REMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(func), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getRemoveFunctionFromGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt deleteSingle(BigInteger txType) {
        final Function function = new Function(
                FUNC_DELETESINGLE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(txType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void deleteSingle(BigInteger txType, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETESINGLE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(txType)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteSingle(BigInteger txType) {
        final Function function = new Function(
                FUNC_DELETESINGLE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(txType)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getDeleteSingleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETESINGLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt deleteAddGovernorReq(String account) {
        final Function function = new Function(
                FUNC_DELETEADDGOVERNORREQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void deleteAddGovernorReq(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEADDGOVERNORREQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteAddGovernorReq(String account) {
        final Function function = new Function(
                FUNC_DELETEADDGOVERNORREQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteAddGovernorReqInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEADDGOVERNORREQ, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt requestRemoveFunctionFromGroup(String contractAddr, String func, String group) {
        final Function function = new Function(
                FUNC_REQUESTREMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(func), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void requestRemoveFunctionFromGroup(String contractAddr, String func, String group, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTREMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(func), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRequestRemoveFunctionFromGroup(String contractAddr, String func, String group) {
        final Function function = new Function(
                FUNC_REQUESTREMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(func), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getRequestRemoveFunctionFromGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REQUESTREMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple2<String, BigInteger> viewCreateGroup() throws ContractException {
        final Function function = new Function(FUNC_VIEWCREATEGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<String, BigInteger>(
                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public List getGovernorsToRemove() throws ContractException {
        final Function function = new Function(FUNC_GETGOVERNORSTOREMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt requestRemoveAccountFromGroup(String account, String group) {
        final Function function = new Function(
                FUNC_REQUESTREMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void requestRemoveAccountFromGroup(String account, String group, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTREMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRequestRemoveAccountFromGroup(String account, String group) {
        final Function function = new Function(
                FUNC_REQUESTREMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRequestRemoveAccountFromGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REQUESTREMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple2<String, String> viewAddAccountToGroup() throws ContractException {
        final Function function = new Function(FUNC_VIEWADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public TransactionReceipt executeRemoveAccountFromGroup() {
        final Function function = new Function(
                FUNC_EXECUTEREMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void executeRemoveAccountFromGroup(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXECUTEREMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExecuteRemoveAccountFromGroup() {
        final Function function = new Function(
                FUNC_EXECUTEREMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public String getAdmin() throws ContractException {
        final Function function = new Function(FUNC_GETADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean inGovs() throws ContractException {
        final Function function = new Function(FUNC_INGOVS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt requestAddAccountToGroup(String account, String group) {
        final Function function = new Function(
                FUNC_REQUESTADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void requestAddAccountToGroup(String account, String group, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRequestAddAccountToGroup(String account, String group) {
        final Function function = new Function(
                FUNC_REQUESTADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRequestAddAccountToGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REQUESTADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple7<BigInteger, String, BigInteger, String, BigInteger, BigInteger, BigInteger> getRemoveGovRequest(String account) throws ContractException {
        final Function function = new Function(FUNC_GETREMOVEGOVREQUEST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, String, BigInteger, String, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue());
    }

    public TransactionReceipt executeSetThreshold() {
        final Function function = new Function(
                FUNC_EXECUTESETTHRESHOLD, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void executeSetThreshold(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXECUTESETTHRESHOLD, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExecuteSetThreshold() {
        final Function function = new Function(
                FUNC_EXECUTESETTHRESHOLD, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public BigInteger opMode() throws ContractException {
        final Function function = new Function(FUNC_OPMODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt executeCreateGroup() {
        final Function function = new Function(
                FUNC_EXECUTECREATEGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void executeCreateGroup(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXECUTECREATEGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExecuteCreateGroup() {
        final Function function = new Function(
                FUNC_EXECUTECREATEGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt executeResetGovernAccounts() {
        final Function function = new Function(
                FUNC_EXECUTERESETGOVERNACCOUNTS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void executeResetGovernAccounts(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXECUTERESETGOVERNACCOUNTS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExecuteResetGovernAccounts() {
        final Function function = new Function(
                FUNC_EXECUTERESETGOVERNACCOUNTS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> viewRemoveAccountToGroup() throws ContractException {
        final Function function = new Function(FUNC_VIEWREMOVEACCOUNTTOGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public TransactionReceipt approveSingle(BigInteger txType) {
        final Function function = new Function(
                FUNC_APPROVESINGLE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(txType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void approveSingle(BigInteger txType, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPROVESINGLE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(txType)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApproveSingle(BigInteger txType) {
        final Function function = new Function(
                FUNC_APPROVESINGLE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(txType)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getApproveSingleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPROVESINGLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Boolean containsAccount(String group, String account) throws ContractException {
        final Function function = new Function(FUNC_CONTAINSACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt executeAddGovernorReq(String account) {
        final Function function = new Function(
                FUNC_EXECUTEADDGOVERNORREQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void executeAddGovernorReq(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXECUTEADDGOVERNORREQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExecuteAddGovernorReq(String account) {
        final Function function = new Function(
                FUNC_EXECUTEADDGOVERNORREQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getExecuteAddGovernorReqInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_EXECUTEADDGOVERNORREQ, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getGroup(String group) throws ContractException {
        final Function function = new Function(FUNC_GETGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue());
    }

    public Tuple2<BigInteger, BigInteger> getWeight(String who) throws ContractException {
        final Function function = new Function(FUNC_GETWEIGHT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(who)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}, new TypeReference<Uint16>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public TransactionReceipt executeAddAccountToGroup() {
        final Function function = new Function(
                FUNC_EXECUTEADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void executeAddAccountToGroup(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXECUTEADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExecuteAddAccountToGroup() {
        final Function function = new Function(
                FUNC_EXECUTEADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Boolean canCallFunction(String contractAddr, byte[] sig, String caller) throws ContractException {
        final Function function = new Function(FUNC_CANCALLFUNCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes4(sig), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(caller)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt removeAccountFromGroup(String account, String group) {
        final Function function = new Function(
                FUNC_REMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeAccountFromGroup(String account, String group, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveAccountFromGroup(String account, String group) {
        final Function function = new Function(
                FUNC_REMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRemoveAccountFromGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt transferAdminAuth(String newAdminAddr) {
        final Function function = new Function(
                FUNC_TRANSFERADMINAUTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(newAdminAddr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transferAdminAuth(String newAdminAddr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERADMINAUTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(newAdminAddr)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransferAdminAuth(String newAdminAddr) {
        final Function function = new Function(
                FUNC_TRANSFERADMINAUTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(newAdminAddr)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getTransferAdminAuthInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFERADMINAUTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Boolean isAdmin() throws ContractException {
        final Function function = new Function(FUNC_ISADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt addFunctionToGroup(String contractAddr, String func, String group) {
        final Function function = new Function(
                FUNC_ADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(func), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addFunctionToGroup(String contractAddr, String func, String group, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(func), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddFunctionToGroup(String contractAddr, String func, String group) {
        final Function function = new Function(
                FUNC_ADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(func), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getAddFunctionToGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple2<BigInteger, String> getRequestTxType(BigInteger id) throws ContractException {
        final Function function = new Function(FUNC_GETREQUESTTXTYPE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, String>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public TransactionReceipt createGroup(String group, BigInteger mode) {
        final Function function = new Function(
                FUNC_CREATEGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(mode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createGroup(String group, BigInteger mode, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(mode)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateGroup(String group, BigInteger mode) {
        final Function function = new Function(
                FUNC_CREATEGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(mode)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getCreateGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt requestResetGovernors(List<String> governors, List<BigInteger> weights) {
        final Function function = new Function(
                FUNC_REQUESTRESETGOVERNORS, 
                Arrays.<Type>asList(governors.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(governors, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                weights.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint16[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint16>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(weights, org.fisco.bcos.sdk.abi.datatypes.generated.Uint16.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void requestResetGovernors(List<String> governors, List<BigInteger> weights, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTRESETGOVERNORS, 
                Arrays.<Type>asList(governors.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(governors, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                weights.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint16[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint16>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(weights, org.fisco.bcos.sdk.abi.datatypes.generated.Uint16.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRequestResetGovernors(List<String> governors, List<BigInteger> weights) {
        final Function function = new Function(
                FUNC_REQUESTRESETGOVERNORS, 
                Arrays.<Type>asList(governors.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(governors, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                weights.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint16[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint16>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(weights, org.fisco.bcos.sdk.abi.datatypes.generated.Uint16.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<List<String>, List<BigInteger>> getRequestResetGovernorsInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REQUESTRESETGOVERNORS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<List<String>, List<BigInteger>>(

                convertToNative((List<Address>) results.get(0).getValue()), 
                convertToNative((List<Uint16>) results.get(1).getValue())
                );
    }

    public TransactionReceipt deleteRemoveGovernorReq(String account) {
        final Function function = new Function(
                FUNC_DELETEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void deleteRemoveGovernorReq(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteRemoveGovernorReq(String account) {
        final Function function = new Function(
                FUNC_DELETEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteRemoveGovernorReqInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt executeAddFunctionToGroup() {
        final Function function = new Function(
                FUNC_EXECUTEADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void executeAddFunctionToGroup(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXECUTEADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExecuteAddFunctionToGroup() {
        final Function function = new Function(
                FUNC_EXECUTEADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public String getVoteWeight() throws ContractException {
        final Function function = new Function(FUNC_GETVOTEWEIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple7<BigInteger, String, BigInteger, String, BigInteger, BigInteger, BigInteger> getRequestSingle(BigInteger txType) throws ContractException {
        final Function function = new Function(FUNC_GETREQUESTSINGLE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(txType)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, String, BigInteger, String, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue());
    }

    public Tuple7<BigInteger, String, BigInteger, String, BigInteger, BigInteger, BigInteger> getAddGovRequest(String account) throws ContractException {
        final Function function = new Function(FUNC_GETADDGOVREQUEST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, String, BigInteger, String, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue());
    }

    public TransactionReceipt requestAddFunctionToGroup(String contractAddr, String func, String group) {
        final Function function = new Function(
                FUNC_REQUESTADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(func), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void requestAddFunctionToGroup(String contractAddr, String func, String group, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(func), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRequestAddFunctionToGroup(String contractAddr, String func, String group) {
        final Function function = new Function(
                FUNC_REQUESTADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(func), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getRequestAddFunctionToGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REQUESTADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt addAccountToGroup(String account, String group) {
        final Function function = new Function(
                FUNC_ADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addAccountToGroup(String account, String group, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAccountToGroup(String account, String group) {
        final Function function = new Function(
                FUNC_ADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getAddAccountToGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt requestRemoveGovernor(String account) {
        final Function function = new Function(
                FUNC_REQUESTREMOVEGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void requestRemoveGovernor(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTREMOVEGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRequestRemoveGovernor(String account) {
        final Function function = new Function(
                FUNC_REQUESTREMOVEGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRequestRemoveGovernorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REQUESTREMOVEGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public List getGovernorsToAdd() throws ContractException {
        final Function function = new Function(FUNC_GETGOVERNORSTOADD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt requestCreateGroup(String group, BigInteger mode) {
        final Function function = new Function(
                FUNC_REQUESTCREATEGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(mode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void requestCreateGroup(String group, BigInteger mode, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTCREATEGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(mode)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRequestCreateGroup(String group, BigInteger mode) {
        final Function function = new Function(
                FUNC_REQUESTCREATEGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(group), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(mode)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRequestCreateGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REQUESTCREATEGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt requestSetThreshold(BigInteger newThreshold) {
        final Function function = new Function(
                FUNC_REQUESTSETTHRESHOLD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint16(newThreshold)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void requestSetThreshold(BigInteger newThreshold, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTSETTHRESHOLD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint16(newThreshold)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRequestSetThreshold(BigInteger newThreshold) {
        final Function function = new Function(
                FUNC_REQUESTSETTHRESHOLD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint16(newThreshold)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getRequestSetThresholdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REQUESTSETTHRESHOLD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<RequestCreateGroupEventResponse> getRequestCreateGroupEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTCREATEGROUP_EVENT, transactionReceipt);
        ArrayList<RequestCreateGroupEventResponse> responses = new ArrayList<RequestCreateGroupEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestCreateGroupEventResponse typedResponse = new RequestCreateGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.mode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestCreateGroupEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTCREATEGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestCreateGroupEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTCREATEGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RequestAddAccountToGroupEventResponse> getRequestAddAccountToGroupEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTADDACCOUNTTOGROUP_EVENT, transactionReceipt);
        ArrayList<RequestAddAccountToGroupEventResponse> responses = new ArrayList<RequestAddAccountToGroupEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestAddAccountToGroupEventResponse typedResponse = new RequestAddAccountToGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestAddAccountToGroupEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTADDACCOUNTTOGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestAddAccountToGroupEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTADDACCOUNTTOGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RequestAddFunctionToGroupEventResponse> getRequestAddFunctionToGroupEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTADDFUNCTIONTOGROUP_EVENT, transactionReceipt);
        ArrayList<RequestAddFunctionToGroupEventResponse> responses = new ArrayList<RequestAddFunctionToGroupEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestAddFunctionToGroupEventResponse typedResponse = new RequestAddFunctionToGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.contractAddr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.func = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestAddFunctionToGroupEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTADDFUNCTIONTOGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestAddFunctionToGroupEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTADDFUNCTIONTOGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RequestRemoveAccountFromGroupEventResponse> getRequestRemoveAccountFromGroupEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTREMOVEACCOUNTFROMGROUP_EVENT, transactionReceipt);
        ArrayList<RequestRemoveAccountFromGroupEventResponse> responses = new ArrayList<RequestRemoveAccountFromGroupEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestRemoveAccountFromGroupEventResponse typedResponse = new RequestRemoveAccountFromGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestRemoveAccountFromGroupEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTREMOVEACCOUNTFROMGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestRemoveAccountFromGroupEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTREMOVEACCOUNTFROMGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RequestRemoveFunctionFromGroupEventResponse> getRequestRemoveFunctionFromGroupEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTREMOVEFUNCTIONFROMGROUP_EVENT, transactionReceipt);
        ArrayList<RequestRemoveFunctionFromGroupEventResponse> responses = new ArrayList<RequestRemoveFunctionFromGroupEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestRemoveFunctionFromGroupEventResponse typedResponse = new RequestRemoveFunctionFromGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.contractAddr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.func = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestRemoveFunctionFromGroupEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTREMOVEFUNCTIONFROMGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestRemoveFunctionFromGroupEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTREMOVEFUNCTIONFROMGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<CreateGroupEventResponse> getCreateGroupEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEGROUP_EVENT, transactionReceipt);
        ArrayList<CreateGroupEventResponse> responses = new ArrayList<CreateGroupEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateGroupEventResponse typedResponse = new CreateGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.mode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeCreateGroupEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATEGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCreateGroupEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATEGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AddAccountToGroupEventResponse> getAddAccountToGroupEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDACCOUNTTOGROUP_EVENT, transactionReceipt);
        ArrayList<AddAccountToGroupEventResponse> responses = new ArrayList<AddAccountToGroupEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddAccountToGroupEventResponse typedResponse = new AddAccountToGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAddAccountToGroupEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDACCOUNTTOGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAddAccountToGroupEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDACCOUNTTOGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AddFunctionToGroupEventResponse> getAddFunctionToGroupEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDFUNCTIONTOGROUP_EVENT, transactionReceipt);
        ArrayList<AddFunctionToGroupEventResponse> responses = new ArrayList<AddFunctionToGroupEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddFunctionToGroupEventResponse typedResponse = new AddFunctionToGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.contractAddr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.func = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAddFunctionToGroupEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDFUNCTIONTOGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAddFunctionToGroupEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDFUNCTIONTOGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RemoveAccountFromGroupEventResponse> getRemoveAccountFromGroupEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVEACCOUNTFROMGROUP_EVENT, transactionReceipt);
        ArrayList<RemoveAccountFromGroupEventResponse> responses = new ArrayList<RemoveAccountFromGroupEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemoveAccountFromGroupEventResponse typedResponse = new RemoveAccountFromGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRemoveAccountFromGroupEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVEACCOUNTFROMGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRemoveAccountFromGroupEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVEACCOUNTFROMGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RemoveFunctionFromGroupEventResponse> getRemoveFunctionFromGroupEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVEFUNCTIONFROMGROUP_EVENT, transactionReceipt);
        ArrayList<RemoveFunctionFromGroupEventResponse> responses = new ArrayList<RemoveFunctionFromGroupEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemoveFunctionFromGroupEventResponse typedResponse = new RemoveFunctionFromGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.contractAddr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.func = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRemoveFunctionFromGroupEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVEFUNCTIONFROMGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRemoveFunctionFromGroupEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVEFUNCTIONFROMGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<InitWeightDataEventResponse> getInitWeightDataEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INITWEIGHTDATA_EVENT, transactionReceipt);
        ArrayList<InitWeightDataEventResponse> responses = new ArrayList<InitWeightDataEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitWeightDataEventResponse typedResponse = new InitWeightDataEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.accounts = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.weights = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.threshold = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInitWeightDataEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INITWEIGHTDATA_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInitWeightDataEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INITWEIGHTDATA_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RequestSetThresholdEventResponse> getRequestSetThresholdEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTSETTHRESHOLD_EVENT, transactionReceipt);
        ArrayList<RequestSetThresholdEventResponse> responses = new ArrayList<RequestSetThresholdEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestSetThresholdEventResponse typedResponse = new RequestSetThresholdEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.threshold = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestSetThresholdEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTSETTHRESHOLD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestSetThresholdEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTSETTHRESHOLD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ExecuteSetThresholdEventResponse> getExecuteSetThresholdEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EXECUTESETTHRESHOLD_EVENT, transactionReceipt);
        ArrayList<ExecuteSetThresholdEventResponse> responses = new ArrayList<ExecuteSetThresholdEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ExecuteSetThresholdEventResponse typedResponse = new ExecuteSetThresholdEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeExecuteSetThresholdEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(EXECUTESETTHRESHOLD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeExecuteSetThresholdEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(EXECUTESETTHRESHOLD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RequestResetGovernorsEventResponse> getRequestResetGovernorsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTRESETGOVERNORS_EVENT, transactionReceipt);
        ArrayList<RequestResetGovernorsEventResponse> responses = new ArrayList<RequestResetGovernorsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestResetGovernorsEventResponse typedResponse = new RequestResetGovernorsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.governors = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.weights = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestResetGovernorsEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTRESETGOVERNORS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestResetGovernorsEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTRESETGOVERNORS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ExecuteResetGovernAccountsEventResponse> getExecuteResetGovernAccountsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EXECUTERESETGOVERNACCOUNTS_EVENT, transactionReceipt);
        ArrayList<ExecuteResetGovernAccountsEventResponse> responses = new ArrayList<ExecuteResetGovernAccountsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ExecuteResetGovernAccountsEventResponse typedResponse = new ExecuteResetGovernAccountsEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeExecuteResetGovernAccountsEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(EXECUTERESETGOVERNACCOUNTS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeExecuteResetGovernAccountsEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(EXECUTERESETGOVERNACCOUNTS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RequestAddGovernorEventResponse> getRequestAddGovernorEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTADDGOVERNOR_EVENT, transactionReceipt);
        ArrayList<RequestAddGovernorEventResponse> responses = new ArrayList<RequestAddGovernorEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestAddGovernorEventResponse typedResponse = new RequestAddGovernorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.reqId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestAddGovernorEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTADDGOVERNOR_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestAddGovernorEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTADDGOVERNOR_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DeleteAddGovernorReqEventResponse> getDeleteAddGovernorReqEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEADDGOVERNORREQ_EVENT, transactionReceipt);
        ArrayList<DeleteAddGovernorReqEventResponse> responses = new ArrayList<DeleteAddGovernorReqEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteAddGovernorReqEventResponse typedResponse = new DeleteAddGovernorReqEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeDeleteAddGovernorReqEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETEADDGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDeleteAddGovernorReqEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETEADDGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ApproveAddGovernorReqEventResponse> getApproveAddGovernorReqEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVEADDGOVERNORREQ_EVENT, transactionReceipt);
        ArrayList<ApproveAddGovernorReqEventResponse> responses = new ArrayList<ApproveAddGovernorReqEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApproveAddGovernorReqEventResponse typedResponse = new ApproveAddGovernorReqEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeApproveAddGovernorReqEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVEADDGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeApproveAddGovernorReqEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVEADDGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ExecuteAddGovernorReqEventResponse> getExecuteAddGovernorReqEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EXECUTEADDGOVERNORREQ_EVENT, transactionReceipt);
        ArrayList<ExecuteAddGovernorReqEventResponse> responses = new ArrayList<ExecuteAddGovernorReqEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ExecuteAddGovernorReqEventResponse typedResponse = new ExecuteAddGovernorReqEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeExecuteAddGovernorReqEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(EXECUTEADDGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeExecuteAddGovernorReqEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(EXECUTEADDGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RequestRemoveGovernorEventResponse> getRequestRemoveGovernorEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTREMOVEGOVERNOR_EVENT, transactionReceipt);
        ArrayList<RequestRemoveGovernorEventResponse> responses = new ArrayList<RequestRemoveGovernorEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestRemoveGovernorEventResponse typedResponse = new RequestRemoveGovernorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestRemoveGovernorEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTREMOVEGOVERNOR_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestRemoveGovernorEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTREMOVEGOVERNOR_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DeleteRemoveGovernorReqEventResponse> getDeleteRemoveGovernorReqEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEREMOVEGOVERNORREQ_EVENT, transactionReceipt);
        ArrayList<DeleteRemoveGovernorReqEventResponse> responses = new ArrayList<DeleteRemoveGovernorReqEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteRemoveGovernorReqEventResponse typedResponse = new DeleteRemoveGovernorReqEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeDeleteRemoveGovernorReqEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETEREMOVEGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDeleteRemoveGovernorReqEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETEREMOVEGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ApproveRemoveGovernorReqEventResponse> getApproveRemoveGovernorReqEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVEREMOVEGOVERNORREQ_EVENT, transactionReceipt);
        ArrayList<ApproveRemoveGovernorReqEventResponse> responses = new ArrayList<ApproveRemoveGovernorReqEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApproveRemoveGovernorReqEventResponse typedResponse = new ApproveRemoveGovernorReqEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeApproveRemoveGovernorReqEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVEREMOVEGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeApproveRemoveGovernorReqEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVEREMOVEGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ExecuteRemoveGovernorReqEventResponse> getExecuteRemoveGovernorReqEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EXECUTEREMOVEGOVERNORREQ_EVENT, transactionReceipt);
        ArrayList<ExecuteRemoveGovernorReqEventResponse> responses = new ArrayList<ExecuteRemoveGovernorReqEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ExecuteRemoveGovernorReqEventResponse typedResponse = new ExecuteRemoveGovernorReqEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeExecuteRemoveGovernorReqEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(EXECUTEREMOVEGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeExecuteRemoveGovernorReqEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(EXECUTEREMOVEGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ApproveSingleEventResponse> getApproveSingleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVESINGLE_EVENT, transactionReceipt);
        ArrayList<ApproveSingleEventResponse> responses = new ArrayList<ApproveSingleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApproveSingleEventResponse typedResponse = new ApproveSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txType = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeApproveSingleEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVESINGLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeApproveSingleEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVESINGLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DeleteSingleEventResponse> getDeleteSingleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETESINGLE_EVENT, transactionReceipt);
        ArrayList<DeleteSingleEventResponse> responses = new ArrayList<DeleteSingleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteSingleEventResponse typedResponse = new DeleteSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txType = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeDeleteSingleEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETESINGLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDeleteSingleEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETESINGLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogSetVoteWeightEventResponse> getLogSetVoteWeightEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGSETVOTEWEIGHT_EVENT, transactionReceipt);
        ArrayList<LogSetVoteWeightEventResponse> responses = new ArrayList<LogSetVoteWeightEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogSetVoteWeightEventResponse typedResponse = new LogSetVoteWeightEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voteWeight = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogSetVoteWeightEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGSETVOTEWEIGHT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogSetVoteWeightEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGSETVOTEWEIGHT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogRegisterEventResponse> getLogRegisterEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGREGISTER_EVENT, transactionReceipt);
        ArrayList<LogRegisterEventResponse> responses = new ArrayList<LogRegisterEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogRegisterEventResponse typedResponse = new LogRegisterEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.txType = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.requestAddress = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.threshold = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogRegisterEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGREGISTER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogRegisterEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGREGISTER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogUnregisterEventResponse> getLogUnregisterEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGUNREGISTER_EVENT, transactionReceipt);
        ArrayList<LogUnregisterEventResponse> responses = new ArrayList<LogUnregisterEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogUnregisterEventResponse typedResponse = new LogUnregisterEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.result = (Boolean) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogUnregisterEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGUNREGISTER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogUnregisterEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGUNREGISTER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogApproveEventResponse> getLogApproveEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGAPPROVE_EVENT, transactionReceipt);
        ArrayList<LogApproveEventResponse> responses = new ArrayList<LogApproveEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogApproveEventResponse typedResponse = new LogApproveEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.who = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.b = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogApproveEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGAPPROVE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogApproveEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGAPPROVE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogUnapproveEventResponse> getLogUnapproveEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGUNAPPROVE_EVENT, transactionReceipt);
        ArrayList<LogUnapproveEventResponse> responses = new ArrayList<LogUnapproveEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogUnapproveEventResponse typedResponse = new LogUnapproveEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.who = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.b = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogUnapproveEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGUNAPPROVE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogUnapproveEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGUNAPPROVE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogCanCallEventResponse> getLogCanCallEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGCANCALL_EVENT, transactionReceipt);
        ArrayList<LogCanCallEventResponse> responses = new ArrayList<LogCanCallEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogCanCallEventResponse typedResponse = new LogCanCallEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.requestAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogCanCallEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGCANCALL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogCanCallEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGCANCALL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferAdminAuthEventResponse> getTransferAdminAuthEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERADMINAUTH_EVENT, transactionReceipt);
        ArrayList<TransferAdminAuthEventResponse> responses = new ArrayList<TransferAdminAuthEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferAdminAuthEventResponse typedResponse = new TransferAdminAuthEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldAdmin = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferAdminAuthEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFERADMINAUTH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferAdminAuthEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFERADMINAUTH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static AuthManager load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new AuthManager(contractAddress, client, credential);
    }

    public static AuthManager deploy(Client client, CryptoKeyPair credential, BigInteger mode, List<String> accounts, List<BigInteger> weights, BigInteger threshold) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(mode), 
                accounts.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(accounts, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                weights.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint16[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint16>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(weights, org.fisco.bcos.sdk.abi.datatypes.generated.Uint16.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint16(threshold)));
        return deploy(AuthManager.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class RequestCreateGroupEventResponse {
        public TransactionReceipt.Logs log;

        public String group;

        public BigInteger mode;
    }

    public static class RequestAddAccountToGroupEventResponse {
        public TransactionReceipt.Logs log;

        public String account;

        public String group;
    }

    public static class RequestAddFunctionToGroupEventResponse {
        public TransactionReceipt.Logs log;

        public String contractAddr;

        public String func;

        public String group;
    }

    public static class RequestRemoveAccountFromGroupEventResponse {
        public TransactionReceipt.Logs log;

        public String account;

        public String group;
    }

    public static class RequestRemoveFunctionFromGroupEventResponse {
        public TransactionReceipt.Logs log;

        public String contractAddr;

        public String func;

        public String group;
    }

    public static class CreateGroupEventResponse {
        public TransactionReceipt.Logs log;

        public String group;

        public BigInteger mode;
    }

    public static class AddAccountToGroupEventResponse {
        public TransactionReceipt.Logs log;

        public String account;

        public String group;
    }

    public static class AddFunctionToGroupEventResponse {
        public TransactionReceipt.Logs log;

        public String contractAddr;

        public String func;

        public String group;
    }

    public static class RemoveAccountFromGroupEventResponse {
        public TransactionReceipt.Logs log;

        public String account;

        public String group;
    }

    public static class RemoveFunctionFromGroupEventResponse {
        public TransactionReceipt.Logs log;

        public String contractAddr;

        public String func;

        public String group;
    }

    public static class InitWeightDataEventResponse {
        public TransactionReceipt.Logs log;

        public List<String> accounts;

        public List<BigInteger> weights;

        public BigInteger threshold;
    }

    public static class RequestSetThresholdEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger threshold;
    }

    public static class ExecuteSetThresholdEventResponse {
        public TransactionReceipt.Logs log;
    }

    public static class RequestResetGovernorsEventResponse {
        public TransactionReceipt.Logs log;

        public List<String> governors;

        public List<BigInteger> weights;
    }

    public static class ExecuteResetGovernAccountsEventResponse {
        public TransactionReceipt.Logs log;
    }

    public static class RequestAddGovernorEventResponse {
        public TransactionReceipt.Logs log;

        public String account;

        public BigInteger reqId;
    }

    public static class DeleteAddGovernorReqEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class ApproveAddGovernorReqEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class ExecuteAddGovernorReqEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class RequestRemoveGovernorEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class DeleteRemoveGovernorReqEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class ApproveRemoveGovernorReqEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class ExecuteRemoveGovernorReqEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class ApproveSingleEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger txType;
    }

    public static class DeleteSingleEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger txType;
    }

    public static class LogSetVoteWeightEventResponse {
        public TransactionReceipt.Logs log;

        public String voteWeight;

        public String contractAddress;
    }

    public static class LogRegisterEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public BigInteger txType;

        public String requestAddress;

        public BigInteger threshold;

        public String contractAddress;
    }

    public static class LogUnregisterEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public Boolean result;

        public String contractAddress;
    }

    public static class LogApproveEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public String who;

        public Boolean b;

        public String contractAddress;
    }

    public static class LogUnapproveEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public String who;

        public Boolean b;

        public String contractAddress;
    }

    public static class LogCanCallEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public String requestAddress;

        public String contractAddress;
    }

    public static class TransferAdminAuthEventResponse {
        public TransactionReceipt.Logs log;

        public String oldAdmin;

        public String newAdmin;
    }
}
